"""
Django settings for Djangoweb project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import certifi
from dotenv import load_dotenv

os.environ['SSL_CERT_FILE'] = certifi.where()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print(f"\nBASE_DIR : {BASE_DIR}\n")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n3714lj&sdfv_e9qw4)z+zv@%4ugleb&bp=cwgu$@n%$%r_-&1'

# Environment Detection
def detect_environment():
    """Detect if we're running on PythonAnywhere or localhost"""
    # Check for PythonAnywhere specific indicators
    if os.path.exists('/var/www') or 'pythonanywhere' in os.environ.get('HOSTNAME', ''):
        return 'production'
    elif os.environ.get('DJANGO_ENVIRONMENT'):
        return os.environ.get('DJANGO_ENVIRONMENT')
    else:
        return 'development'

ENVIRONMENT = detect_environment()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT == 'development'

# Base allowed hosts
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'tharoth.pythonanywhere.com',
    'www.tharoth.pythonanywhere.com',
    '.pythonanywhere.com',  # Allow all pythonanywhere subdomains
    '.ngrok-free.app',  # Allow all ngrok subdomains
]

# Add production hosts if in production
if ENVIRONMENT == 'production':
    # Ensure these settings are enabled in production
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True
    # Disable debug in production
    DEBUG = False
else:
    DEBUG = True

print(f"Environment: {ENVIRONMENT}")
print(f"Debug mode: {DEBUG}")
print(f"Allowed hosts: {ALLOWED_HOSTS}")

# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'ckeditor',
]

# Jazzmin Settings
JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "SL Power Admin",
    # Title on the login screen (19 chars max) (Will default to current_admin_site.site_header if absent or None)
    "site_header": "SL Power",
    # Title on the brand (19 chars max) (Will default to current_admin_site.site_header if absent or None)
    "site_brand": "SL Power",
    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "assets/img/logo.png",
    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": "assets/img/logo.png",
    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": "assets/img/logo.png",
    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",
    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": "assets/img/favicon.ico",
    # Welcome text on the login screen
    "welcome_sign": "Welcome to SL Power Admin",
    # Copyright on the footer
    "copyright": "SL Power Ltd",
    # The model admin to search from the search bar, search bar omitted if excluded
    "search_model": "app.RentalBooking",
    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,
    ############
    # Top Menu #
    ############
    # Links to put along the top menu
    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "View Site", "url": "/", "new_window": True},
        {"name": "Dashboard", "url": "admin:index", "icon": "fas fa-tachometer-alt"},
        {"name": "Orders", "url": "admin:app_rentalbooking_changelist", "icon": "fas fa-shopping-cart"},
        {"name": "Services", "url": "admin:app_servicerequest_changelist", "icon": "fas fa-tools"},
        {"name": "Products", "url": "admin:app_product_changelist", "icon": "fas fa-bolt"},
        {"name": "Messages", "url": "admin:app_contactmessage_changelist", "icon": "fas fa-envelope"},
    ],
    #############
    # Side Menu #
    #############
    # Whether to display the side menu
    "show_sidebar": True,
    # Whether to aut expand the menu
    "navigation_expanded": True,
    # Custom icons for side menu apps/models
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.group": "fas fa-users",
        "app.rentalbooking": "fas fa-shopping-cart",
        "app.servicerequest": "fas fa-tools",
        "app.product": "fas fa-bolt",
        "app.generalinfo": "fas fa-info-circle",
        "app.service": "fas fa-cogs",
        "app.testimonial": "fas fa-comments",
        "app.frequentlyaskedquestion": "fas fa-question-circle",
        "app.herosection": "fas fa-images",
        "app.contactformlog": "fas fa-envelope",
        "app.contactmessage": "fas fa-envelope-open-text",
        "app.faq": "fas fa-question",
        "app.profile": "fas fa-user-circle",
    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    
    # User menu links
    "user_menu_links": [
        {"name": "Profile", "url": "admin:app_profile_change", "icon": "fas fa-user"},
        {"name": "Settings", "url": "admin:app_generalinfo_change", "icon": "fas fa-cog"},
        {"name": "View Site", "url": "/", "icon": "fas fa-external-link-alt"},
    ],
    
    # Show UI Builder
    "show_ui_builder": True,
    
    # Change form format
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
    },
    
    # Profile settings
    "profile_settings": {
        "show_profile": True,
        "show_avatar": True,
        "show_name": True,
        "show_email": True,
        "show_phone": True,
    },
    
    # Custom CSS/JS
    "custom_css": None,
    "custom_js": None,
    
    # Order with respect to model name
    "order_with_respect_to": ["auth", "app"],
    
    # Custom icons for side menu apps/models when collapsed
    "icons_collapsed": {
        "auth": "fas fa-users-cog",
        "app": "fas fa-cogs",
    },
    
    # Related modal
    "related_modal_active": True,
}

# UI Customizer
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": "navbar-secondary",
    "accent": "accent-navy",
    "navbar": "navbar-secondary navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-light-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": True,
    "sidebar_nav_child_indent": True,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": True,
    "sidebar_nav_flat_style": False,
    "theme": "sandstone",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-outline-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Djangoweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates/')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.general_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'Djangoweb.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Configure static files storage based on environment
if ENVIRONMENT == 'production':
    # Production: Use WhiteNoise for static files
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_MANIFEST_STRICT = False
    WHITENOISE_ALLOW_ALL_ORIGINS = True
else:
    # Development: Use default Django static files handling
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Base URL for generating absolute URLs
if ENVIRONMENT == 'production':
    BASE_URL = 'https://tharoth.pythonanywhere.com'
else:
    BASE_URL = 'http://localhost:8000'

print(f"Static files storage: {STATICFILES_STORAGE}")
print(f"Base URL: {BASE_URL}")

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Load tokens and secrets from myenv/tokenemailandtelegram
TOKEN_FILE = os.path.join(BASE_DIR, 'myenv', 'tokenemailandtelegram.txt')
print(f"Looking for token file at: {TOKEN_FILE}")
if os.path.exists(TOKEN_FILE):
    print("Token file found, loading environment variables...")
    with open(TOKEN_FILE) as f:
        for line in f:
            if '=' in line:
                key, value = line.strip().split('=', 1)
                os.environ[key] = value
                print(f"Loaded {key}")
else:
    print("Token file not found!")

# Email settings for Gmail SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False  # This should be False when using TLS
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')

# Print email settings for debugging
print("\nEmail Configuration:")
print(f"EMAIL_HOST: {EMAIL_HOST}")
print(f"EMAIL_PORT: {EMAIL_PORT}")
print(f"EMAIL_USE_TLS: {EMAIL_USE_TLS}")
print(f"EMAIL_USE_SSL: {EMAIL_USE_SSL}")
print(f"EMAIL_HOST_USER: {EMAIL_HOST_USER}")
print(f"DEFAULT_FROM_EMAIL: {DEFAULT_FROM_EMAIL}")
print(f"EMAIL_BACKEND: {EMAIL_BACKEND}")

# For development/testing, use SMTP backend always to catch real issues
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    print("Using SMTP email backend for debugging")

# Telegram Bot Settings
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '1139756425')

# Set webhook URL based on environment
if ENVIRONMENT == 'production':
    TELEGRAM_WEBHOOK_URL = 'https://tharoth.pythonanywhere.com/telegram/webhook/'
else:
    TELEGRAM_WEBHOOK_URL = 'http://localhost:8000/telegram/webhook/'

print(f"Environment: {ENVIRONMENT}")
print(f"Debug mode: {DEBUG}")
print(f"Allowed hosts: {ALLOWED_HOSTS}")
print(f"Telegram Bot Token loaded: {'Yes' if TELEGRAM_BOT_TOKEN else 'No'}")
print(f"Telegram Chat ID loaded: {TELEGRAM_CHAT_ID}")
print(f"Telegram Webhook URL: {TELEGRAM_WEBHOOK_URL}")

# Security settings based on environment
if ENVIRONMENT == 'production':
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    # Development settings
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_PROXY_SSL_HEADER = None
    USE_X_FORWARDED_HOST = False
    USE_X_FORWARDED_PORT = False

# Load environment variables
load_dotenv()

# Google Sheets integration
GOOGLE_SHEET_ID = os.environ.get('GOOGLE_SHEET_ID', 'your-google-sheet-id-here')